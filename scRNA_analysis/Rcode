#' ---
#' title: "Single Cell Regional Meninges Analysis"
#' author: "Nathan Boles"
#' date: "November 14th, 2018"
#' output: pdf_document
#' ---

#######libraries and session info
library(foreach)
library(doMC)
registerDoMC(cores=20)
library(monocle)
library(org.Mm.eg.db)
library(biomaRt)
library(dplyr)
library(DBI)
library(GenomicFeatures)
library(rtracklayer)
library(Rsamtools)
library(GenomicAlignments)
library(GenomicRanges)
library(Seurat)	
sessionInfo()
#R version 3.4.2 (2017-09-28)
#Platform: x86_64-pc-linux-gnu (64-bit)
#Running under: Debian GNU/Linux stretch/sid

#Matrix products: default
#BLAS: /usr/lib/atlas-base/atlas/libblas.so.3.0
#LAPACK: /usr/lib/atlas-base/atlas/liblapack.so.3.0

#locale:
# [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
# [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
# [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
# [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
# [9] LC_ADDRESS=C               LC_TELEPHONE=C            
#[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

#attached base packages:
# [1] splines   stats4    parallel  stats     graphics  grDevices utils    
# [8] datasets  methods   base     

#other attached packages:
# [1] Seurat_2.3.4               cowplot_0.9.2             
# [3] GenomicAlignments_1.14.2   SummarizedExperiment_1.8.1
# [5] DelayedArray_0.4.1         matrixStats_0.53.1        
# [7] Rsamtools_1.30.0           Biostrings_2.46.0         
# [9] XVector_0.18.0             rtracklayer_1.38.3        
#[11] GenomicFeatures_1.30.3     GenomicRanges_1.30.3      
#[13] GenomeInfoDb_1.14.0        DBI_0.8                   
#[15] dplyr_0.7.4                biomaRt_2.34.2            
#[17] org.Mm.eg.db_3.5.0         AnnotationDbi_1.40.0      
#[19] IRanges_2.12.0             S4Vectors_0.16.0          
#[21] monocle_2.6.4              DDRTree_0.1.5             
#[23] irlba_2.3.2                VGAM_1.0-5                
#[25] ggplot2_2.2.1              Biobase_2.38.0            
#[27] BiocGenerics_0.24.0        Matrix_1.2-14             
#[29] doMC_1.3.5                 iterators_1.0.9           
#[31] foreach_1.4.4             

#loaded via a namespace (and not attached):
#  [1] snow_0.4-2             backports_1.1.2        Hmisc_4.1-1           
#  [4] plyr_1.8.4             igraph_1.2.1           lazyeval_0.2.1        
#  [7] BiocParallel_1.12.0    densityClust_0.3       fastICA_1.2-1         
# [10] digest_0.6.15          htmltools_0.3.6        viridis_0.5.1         
# [13] lars_1.2               gdata_2.18.0           magrittr_1.5          
# [16] checkmate_1.8.5        memoise_1.1.0          cluster_2.0.7-1       
# [19] mixtools_1.1.0         ROCR_1.0-7             limma_3.34.9          
# [22] R.utils_2.6.0          prettyunits_1.0.2      colorspace_1.3-2      
# [25] blob_1.1.1             ggrepel_0.7.0          jsonlite_1.5          
# [28] RCurl_1.95-4.10        bindr_0.1.1            zoo_1.8-4             
# [31] survival_2.41-3        ape_5.1                glue_1.2.0            
# [34] gtable_0.2.0           zlibbioc_1.24.0        kernlab_0.9-25        
# [37] prabclus_2.2-6         DEoptimR_1.0-8         scales_0.5.0          
# [40] pheatmap_1.0.8         mvtnorm_1.0-7          bibtex_0.4.2          
# [43] Rcpp_0.12.19           metap_1.0              dtw_1.18-1            
# [46] viridisLite_0.3.0      progress_1.1.2         htmlTable_1.11.2      
# [49] reticulate_1.10        foreign_0.8-69         bit_1.1-12            
# [52] proxy_0.4-22           mclust_5.4             SDMTools_1.1-221      
# [55] Formula_1.2-2          tsne_0.1-3             htmlwidgets_1.0       
# [58] httr_1.3.1             FNN_1.1                gplots_3.0.1          
# [61] RColorBrewer_1.1-2     fpc_2.1-11             acepack_1.4.1         
# [64] modeltools_0.2-21      ica_1.0-1              pkgconfig_2.0.1       
# [67] XML_3.98-1.10          R.methodsS3_1.7.1      flexmix_2.3-14        
# [70] nnet_7.3-12            rlang_0.2.0            reshape2_1.4.3        
# [73] munsell_0.4.3          tools_3.4.2            RSQLite_2.1.0         
# [76] ggridges_0.5.0         stringr_1.3.0          knitr_1.20            
# [79] bit64_0.9-7            fitdistrplus_1.0-9     robustbase_0.92-8     
# [82] caTools_1.17.1         purrr_0.2.4            RANN_2.5.1            
# [85] bindrcpp_0.2.2         pbapply_1.3-4          nlme_3.1-137          
# [88] slam_0.1-42            R.oo_1.21.0            hdf5r_1.0.1           
# [91] compiler_3.4.2         rstudioapi_0.7         png_0.1-7             
# [94] tibble_1.4.2           stringi_1.1.7          lattice_0.20-35       
# [97] trimcluster_0.1-2      HSMMSingleCell_0.112.0 pillar_1.2.1          
#[100] lmtest_0.9-36          combinat_0.0-8         Rdpack_0.10-1         
#[103] data.table_1.10.4-3    bitops_1.0-6           gbRd_0.4-11           
#[106] R6_2.2.2               latticeExtra_0.6-28    RMySQL_0.10.14        
#[109] KernSmooth_2.23-15     gridExtra_2.3          codetools_0.2-15      
#[112] MASS_7.3-49            gtools_3.5.0           assertthat_0.2.0      
#[115] qlcMatrix_0.9.5        GenomeInfoDbData_1.0.0 diptest_0.75-7        
#[118] doSNOW_1.0.16          grid_3.4.2             rpart_4.1-13          
#[121] tidyr_0.8.0            class_7.3-14           segmented_0.5-3.0     
#[124] Rtsne_0.13             base64enc_0.1-3     

##########Functions
####function to QC cells and choose ones for further analysis
choose.cells<-function(mat,library.size=NULL,gene.number=NULL) {
	
	x<-apply(mat,2,sum)
	z<-apply(mat,2,function(x) length(which(x>5)))
	pdf("Libray.vs.gene.pdf",onefile=T,width=11)
		plot(x,z,xlab="Library Size",ylab="Genes with greater than 5 counts")
		hist(x,xlab="Library size")
		hist(z,xlab="Genes with greater than 5 counts")
	dev.off()
	
	if(is.null(library.size)) {
		b<-intersect(which(x>quantile(x,seq(0,1,0.1))[2]),which(x<quantile(x,seq(0,1,0.1))[10]))
		RNA.sub<-mat[,b]
		crit.lib<-c(quantile(x,seq(0,1,0.1))[2],quantile(x,seq(0,1,0.1))[10])
		names(crit.lib)<-c("Min_lib_size","Max_lib_size")
	}else{
		print("Library size entered by user")
		b<-intersect(which(x>library.size[1]),which(x<library.size[2]))
		RNA.sub<-mat[,b]
		crit.lib<-library.size
		names(crit.lib)<-c("Min_lib_size","Max_lib_size")
	}
	if(is.null(gene.number)) {
		z<-apply(RNA.sub,2,function(x) length(which(x>5)))
		y<-log(z)
		RNA.sub<-RNA.sub[,which((median(y)-mad(y)*2)<=y)] 
		x<-apply(RNA.sub,2,sum)
		z<-apply(RNA.sub,2,function(x) length(which(x>5)))
		pdf("Sub.Libray.vs.gene.pdf",onefile=T,width=11)
		plot(x,z,xlab="Library Size",ylab="Genes with greater than 5 counts")
		hist(x,xlab="Library size")
		hist(z,xlab="Genes with greater than 5 counts")
		hist(y,breaks=16,xlab="Genes with greater than 5 counts(log)",main="Before gene size drops are made")
		hist(log(z),breaks=16,xlab="Genes with greater than 5 counts(log)",main="After gene size drops are made")
		dev.off()
		plot(x,z,xlab="Library Size",ylab="Genes with greater than 5 counts")
		hist(x,xlab="Library size")
		hist(z,xlab="Genes with greater than 5 counts")
		hist(y,breaks=16,xlab="Genes with greater than 5 counts(log)",main="Before gene size drops are made")
		hist(log(z),breaks=16,xlab="Genes with greater than 5 counts(log)",main="After gene size drops are made")

		crit.gene<-exp(1)^(median(y)-mad(y)*2)
		names(crit.gene)<-"Gene_number_cutoff"
	}else{
		print("Minimal gene size entered by user")
		RNA.sub<-RNA.sub[,which(gene.number<=z)]
		crit.gene<-gene.number
		names(crit.gene)<-"Gene_number_cutoff"
	}
	
	crit<-c(crit.lib,crit.gene)
	write.csv(crit,"Criteria_for_choosing_cells.csv")
	return(RNA.sub)
}
	
####function to set up seurat object###
seurat.setup<-function(mat,min_cells,min_genes,proj.title,meta_data,regression_vars){
	require(Seurat)
	seur.obj <- CreateSeuratObject(raw.data = mat, min.cells = min_cells, min.genes = min_genes, 
    		project = proj.title)
	seur.obj <- NormalizeData(object = seur.obj, normalization.method = "LogNormalize", 
    		scale.factor = 10000)
	seur.obj <- FindVariableGenes(object = seur.obj, mean.function = ExpMean, dispersion.function = LogVMR, 
    		x.low.cutoff = 0.0125, x.high.cutoff = 8, y.cutoff = 0.5)
	seur.obj <- AddMetaData(seur.obj, meta_data)
	seur.obj <- ScaleData(object = seur.obj, vars.to.regress = regression_vars)
}

####got function from https://stackoverflow.com/questions/18509527/first-letter-to-upper-case/18509816
####capitalizes first letter of a string 
firstup <- function(x) {
  substr(x, 1, 1) <- toupper(substr(x, 1, 1))
  x
}
###########read in data from from RDaTA files generated from mapping pipeline

#######first round of experimental data
load("meninges3prime3A.Rdata")
load("meninges3prime3P.Rdata")
load("meninges3prime18P.Rdata")
meninges3A.3<-meninges3prime3A
meninges3P.3<-meninges3prime3P
meninges18P.3<-meninges3prime18P

#####second round of experimental data
load("meninges3A.Rdata")
load("meninges3P.Rdata")
load("meninges18P.Rdata")
load("meninges18A.Rdata")

#####setting up count matrix
x<-colnames(meninges3A.3)
for(i in 1:length(x)) {x[i]<-paste(x[i],"3prime",sep=".")}
colnames(meninges3A.3)<-x

x<-colnames(meninges3P.3)
for(i in 1:length(x)) {x[i]<-paste(x[i],"3prime",sep=".")}
colnames(meninges3P.3)<-x

x<-colnames(meninges18P.3)
for(i in 1:length(x)) {x[i]<-paste(x[i],"3prime",sep=".")}
colnames(meninges18P.3)<-x

x<-colnames(meninges3A)
for(i in 1:length(x)) {x[i]<-paste(x[i],"fulllength",sep=".")}
colnames(meninges3A)<-x

x<-colnames(meninges3P)
for(i in 1:length(x)) {x[i]<-paste(x[i],"fulllength",sep=".")}
colnames(meninges3P)<-x

x<-colnames(meninges18P)
for(i in 1:length(x)) {x[i]<-paste(x[i],"fulllength",sep=".")}
colnames(meninges18P)<-x

x<-colnames(meninges18A)
for(i in 1:length(x)) {x[i]<-paste(x[i],"fulllength",sep=".")}
colnames(meninges18A)<-x

x<-assay(meninges3A)
a3<-foreach(i=seq(2,dim(x)[2],2),.combine='cbind') %dopar% {
  x[,i-1]+x[i]
}
colnames(a3)<-colnames(x)[seq(2,dim(x)[2],2)]

x<-assay(meninges3P)
p3<-foreach(i=seq(2,dim(x)[2],2),.combine='cbind') %dopar% {
  x[,i-1]+x[i]
}
colnames(p3)<-colnames(x)[seq(2,dim(x)[2],2)]

x<-assay(meninges18A)
a18<-foreach(i=seq(2,dim(x)[2],2),.combine='cbind') %dopar% {
  x[,i-1]+x[i]
}
colnames(a18)<-colnames(x)[seq(2,dim(x)[2],2)]

x<-assay(meninges18P)
p18<-foreach(i=seq(2,dim(x)[2],2),.combine='cbind') %dopar% {
  x[,i-1]+x[i]
}
colnames(p18)<-colnames(x)[seq(2,dim(x)[2],2)]


all<-data.frame(a3,assay(meninges3A.3),p3,assay(meninges3P.3),
                a18,p18,assay(meninges18P.3))

#####QC of cells to choose subset for analysis
z<-apply(all,2,sum)
quantile(z)
RNA.sub<-choose.cells(all,library.size=c(15000,max(z)))



######set up annotation files
SYMBOLS<-unlist(as.list(org.Mm.egSYMBOL))
Entrez<-unlist(as.list(org.Mm.egENSEMBL))
x<-names(Entrez)
names(x)<-Entrez
Entrez<-x
Ensembl<-unlist(as.list(org.Mm.egENSEMBL))
mart <- useDataset("mmusculus_gene_ensembl", useMart("ensembl"))
x<-rownames(RNA.sub)
x<- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","mgi_symbol"),values=x,mart= mart)
y<-x[,2]
names(y)<-x[,1]
MGI<-y
MGI.rev<-names(MGI)
names(MGI.rev)<-MGI


########subset out 3 month data and make an annotation for seurat object using column names
############make a vector of cells expressed per gene and sort high to low
#####to identify relatively stable genes ###
########and remove mitochondrial transcripts
####to be used in clustering after dimensional reductions along with variable genes

####then make a seurat object
expr.sub.3<-RNA.sub[,1:70]
x<-apply(expr.sub.3,1,function(x) sum(ifelse(x>5,1,0)))
expr.sub.3<-expr.sub.3[which(x>=(70*.05)),]

y<-apply(expr.sub.3,1,function(x) sum(ifelse(x>0,1,0)))
y<-sort(y,decreasing=T)
x<-MGI[names(y)]
x<-x[-(grep("mt",x))]
x<-x[-(grep("Mrpl",x))]
x<-x[which(!(is.na(x)))]
y<-y[names(x)]
z<-names(y)
expr.sub.3<-expr.sub.3[z,]

x<-colnames(expr.sub.3)
pd.3<-foreach(i=1:length(x),.combine='rbind') %dopar% {
	z<-strsplit(x[i],"\\.")[[1]][1]
	z<-strsplit(z,"_")[[1]][1]
	z<-strsplit(z,"X")[[1]][2]
	if(length(grep("A",z))>0) {Region<-"Anterior"} else{Region<-"Posterior"}
	if(length(grep("fulllength",x[i]))>0) {SeqType<-"fulllength"} else {SeqType<-"3prime"}
	cbind(Region,SeqType)

}
rownames(pd.3)<-x
pd.3<-as.data.frame(pd.3)

############translate ensemble ids to entrez ids and Gene symbols

x<-rownames(expr.sub.3)
fd<-data.frame(x)
gene_short_name<-MGI[x]
fd<-cbind(fd,gene_short_name)
expr.sub.3<-expr.sub.3[as.character(fd[,1]),]
	

ser.sub.3<-seurat.setup(expr.sub.3,3,200,"Meninges_young",pd.3,c("nUMI", "SeqType"))

####create a dataframe of markers for potential cell clusters using the Panglao database, mouse sensitivity >0 and max(specifity<0.2)
######read into R
pdbm<-read.delim("PanglaoDB_markers.csv")
pdbm<-data.frame(pdbm)
pdbm<-pdbm[order(pdbm$cell.type),]


#######create a gene list to use for pca/ica and clustering
######use top 500 genes expressed across the most cells and 500 most varariable plus markers from pdbm

z<-intersect(pdbm$converted_alias,rownames(ser.sub.3@raw.data))
x<-apply(ser.sub.3@raw.data,1,function(x) length(which(x>0)))
x<-sort(x,decreasing=T)
z<-unique(c(names(x)[1:500],ser.sub.3@var.genes[1:500],z))
#####final gene list size 1209

####look at PCA first
ser.sub.3 <- RunPCA(object = ser.sub.3, pc.genes = z, do.print = F,pcs.compute=30)

VizPCA(ser.sub.3, pcs.use=1:10)
PCAPlot(ser.sub.3)
PCHeatmap(ser.sub.3)
ser.sub.3 <- JackStraw(object = ser.sub.3 , num.replicate = 100, display.progress = FALSE,num.pc=30)
JackStrawPlot(object = ser.sub.3 , PCs = 1:12)
PCElbowPlot(object = ser.sub.3, num.pc=30 )

#########Proceed with ICA reduction 

ser.sub.3  <- RunICA(object = ser.sub.3 , ic.genes = z, ics.print = 0)
ICAPlot(ser.sub.3 ,pt.size=3)
#####choose PCA and determine perplexity value to use in TSNE plots
z<-intersect(pdbm$converted_alias,rownames(ser.sub.3@raw.data))
z<-unique(c(ser.sub.3@var.genes[1:500],z))

ser.sub.3  <- FindClusters(object = ser.sub.3 , reduction.type = "pca",resolution = 1.1, print.output = 0, save.SNN = TRUE, force.recalc=T,genes.use=z)

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:9,perplexity=5,dim.embed=2,reduction.use="pca")
p1<-DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=5") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:9,perplexity=10,dim.embed=2,reduction.use="pca")
p2<-DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=10") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:9,perplexity=15,dim.embed=2,reduction.use="pca")
p3<-DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=15") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:9,perplexity=20,dim.embed=2,reduction.use="pca")
p4<-DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=20") + theme(plot.title = element_text(hjust = 0.5))


plot_grid(p1,p2,p3,p4)

##########choose perplexity=20
ser.sub.3  <- RunTSNE(object = ser.sub.3 ,dims.use=1:9,perplexity=20,dim.embed=2,reduction.use="pca")

####check experimental variables on plot to insure they are not skewing the clustering

DimPlot(ser.sub.3 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="nUMI", do.return = TRUE) + 
	labs(title="nUMI")
DimPlot(ser.sub.3 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="Region", do.return = TRUE) + 
	labs(title="Region")
DimPlot(ser.sub.3 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="nGene", do.return = TRUE) + 
	labs(title="nGene") 
DimPlot(ser.sub.3 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="SeqType", do.return = TRUE) + 
	labs(title="SeqType")
  
#######get markers for each cluster
ser.markers.3 <- FindAllMarkers(object = ser.sub.3,test.use="wilcox",min.pct=0.05)

#############subset out 18 month data and make an annotation for seurat object using column names
####then make a seurat object
expr.sub.18<-RNA.sub[,71:191]
x<-apply(expr.sub.18,1,function(x) sum(ifelse(x>5,1,0)))
expr.sub.18<-expr.sub.18[which(x>=(121*.05)),]
############make a vector of cells expressed per gene and sort high to low
#####to identify relatively stable genes ###
####to be used in clustering after dimensional reductions along with variable genes

############make a vector of cells expressed per gene and sort high to low
#####to identify relatively stable genes ###
####to be used in clustering after dimensional reductions along with variable genes


y<-apply(expr.sub.18,1,function(x) sum(ifelse(x>0,1,0)))
y<-sort(y,decreasing=T)
x<-MGI[names(y)]
x<-x[-(grep("mt",x))]
x<-x[-(grep("Mrpl",x))]
x<-x[which(!(is.na(x)))]
y<-y[names(x)]
z<-names(y)
expr.sub.18<-expr.sub.18[z,]

x<-colnames(expr.sub.18)
pd<-foreach(i=1:length(x),.combine='rbind') %dopar% {
	z<-strsplit(x[i],"\\.")[[1]][1]
	z<-strsplit(z,"_")[[1]][1]
	z<-strsplit(z,"X")[[1]][2]
	if(length(grep("A",z))>0) {Region<-"Anterior"} else{Region<-"Posterior"}
	if(length(grep("fulllength",x[i]))>0) {SeqType<-"fulllength"} else {SeqType<-"3prime"}
	cbind(Region,SeqType)

}
rownames(pd)<-x
pd.18<-as.data.frame(pd)

ser.sub.18<-seurat.setup(expr.sub.18,3,200,"Meninges_old",pd.18,c("nUMI", "SeqType"))



#######create a gene list to use for pca/ica and clustering
######use top 500 genes expressed across the most cells and 500 most varariable plus markers from pdbm

z<-intersect(pdbm$converted_alias,rownames(ser.sub.18@raw.data))
x<-apply(ser.sub.18@raw.data,1,function(x) length(which(x>0)))
x<-sort(x,decreasing=T)
z<-unique(c(names(x)[1:500],ser.sub.18@var.genes[1:500],z))

####look at PCA first
ser.sub.18 <- RunPCA(object = ser.sub.18, pc.genes = z,
	do.print = TRUE, pcs.print = 0, genes.print = 0,pcs.compute=40)

VizPCA(ser.sub.18,pcs.use=1:20)
VizPCA(ser.sub.18,pcs.use=21:40)
PCAPlot(ser.sub.18)
PCHeatmap(ser.sub.18)
ser.sub.18 <- JackStraw(object = ser.sub.18, num.replicate = 100, display.progress = FALSE, num.pc=40)
JackStrawPlot(object = ser.sub.18, PCs = 1:20)
PCElbowPlot(object = ser.sub.18,num.pc=40)



#########Proceed with ICA reduction folowed by clustering
ser.sub.18 <- RunICA(object = ser.sub.18, ics.print = 0,ic.genes=z)
ICAPlot(ser.sub.18 ,pt.size=3)

###choose ICA
z<-intersect(pdbm$converted_alias,rownames(ser.sub.18@raw.data))
z<-unique(c(ser.sub.18@var.genes[1:500],z))
ser.sub.18 <- FindClusters(object = ser.sub.18, reduction.type = "ica",
    resolution = 1.1, print.output = 0, save.SNN = TRUE, force.recalc=T,
	genes.use=z)

#######plot TSNE with different perplexities to chose perplexity value
ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:9,perplexity=5,dim.embed=3,reduction.use="ica")
p1<-DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=5") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:9, perplexity=10,dim.embed=3,reduction.use="ica")
p2<-DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=10") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:9,perplexity=15,dim.embed=3,reduction.use="ica")
p3<-DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=15") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:9,perplexity=20,dim.embed=3,reduction.use="ica")
p4<-DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=20") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:9,perplexity=25,dim.embed=3,reduction.use="ica")
p5<-DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=4, do.return = TRUE)+ ggtitle("perplexity=25") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:9,perplexity=30,dim.embed=3,reduction.use="ica")
p6<-DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=4, do.return = TRUE)+ ggtitle("perplexity=30") + theme(plot.title = element_text(hjust = 0.5))

plot_grid(p1,p2,p3,p4,p5,p6)
#####choose perplexity=20
ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:10,perplexity=20,dim.embed=3,reduction.use="ica")

####check experimental variables on plot to insure they are not skewing the clustering

DimPlot(ser.sub.18 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="nUMI", do.return = TRUE) + 
	labs(title="nUMI")
DimPlot(ser.sub.18 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="Region", do.return = TRUE) + 
	labs(title="Region")
DimPlot(ser.sub.18 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="nGene", do.return = TRUE) + 
	labs(title="nGene") 
DimPlot(ser.sub.18 ,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3,group.by="SeqType", do.return = TRUE) + 
	labs(title="SeqType")
  
#######get markers for each cluster
ser.markers.18 <- FindAllMarkers(object = ser.sub.18,test.use="wilcox",min.pct=0.05)


#####combine the 3 month and 18 month data
#####use CCA 
ser.sub.3@meta.data$Age<-"3"
ser.sub.18@meta.data$Age<-"18"

g1<- ser.markers.18 %>% group_by(cluster) %>% top_n(100, avg_logFC)
g2<- ser.markers.3 %>% group_by(cluster) %>% top_n(100, avg_logFC)
g1<-g1$gene
g2<-g2$gene
gu<-unique(c(g1,g2,pdbm$converted_alias))
gu<-intersect(gu,rownames(ser.sub.3@scale.data))
gu<-intersect(gu,rownames(ser.sub.18@scale.data))



ser.comb<-RunCCA(ser.sub.3,ser.sub.18,genes.use=gu)
############Determine number of CCs to proceed with
MetageneBicorPlot(ser.comb, grouping.var = "Age",dims.eval=1:20,display.progress = FALSE,num.possible.genes=1000)
DimHeatmap(object = ser.comb, reduction.type = "cca", dim.use = 1:12, do.balanced = TRUE,labRow=NULL)

#####choose 6 CCs
ser.comb <- AlignSubspace(ser.comb, reduction.type = "cca", grouping.var = "Age", 
    dims.align = 1:6)

###########cluster then plot TSNE with different perplexities to chose perplexity value
ser.comb <- FindClusters(ser.comb, reduction.type = "cca.aligned", 
    resolution = 1.2, dims.use = 1:6,force.recalc=T)

ser.comb <- RunTSNE(ser.comb, reduction.use = "cca.aligned", dims.use = 1:6, 
    do.fast = T,perplexity=5)
p1 <- TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)+ ggtitle("pxy5")

ser.comb <- RunTSNE(ser.comb, reduction.use = "cca.aligned", dims.use = 1:6, 
    do.fast = T,perplexity=10)
p2 <- TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)+ ggtitle("pxy10")

ser.comb <- RunTSNE(ser.comb, reduction.use = "cca.aligned", dims.use = 1:6, 
    do.fast = T,perplexity=15)
p3 <- TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)+ ggtitle("pxy15")

ser.comb <- RunTSNE(ser.comb, reduction.use = "cca.aligned", dims.use = 1:6, 
    do.fast = T,perplexity=20)
p4 <- TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)+ ggtitle("pxy20")

ser.comb <- RunTSNE(ser.comb, reduction.use = "cca.aligned", dims.use = 1:6, 
    do.fast = T,perplexity=25)
p5 <- TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)+ ggtitle("pxy25")

ser.comb <- RunTSNE(ser.comb, reduction.use = "cca.aligned", dims.use = 1:6, 
    do.fast = T,perplexity=30)
p6 <- TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)+ ggtitle("pxy30")

plot_grid(p1,p2,p3,p4,p5,p6)

########choose perplexity 25

ser.comb <- RunTSNE(ser.comb, reduction.use = "cca.aligned", dims.use = 1:6, 
    do.fast = T,perplexity=25)

####check experimental variables on plot to insure they are not skewing the clustering
p1 <- TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)
p2 <- TSNEPlot(ser.comb, do.return = T, pt.size = 3, group.by = "Age")
p3 <- TSNEPlot(ser.comb, do.return = T, pt.size = 3, group.by = "Region")
p4 <- TSNEPlot(ser.comb, do.return = T, pt.size = 3, group.by = "SeqType")
plot_grid(p1, p2,p3,p4)

#######use pdbm to identify cell types
m<-all[gu,ser.comb@cell.names]
m<-foreach(i=0:max(levels(ser.comb@ident)),.combine='cbind') %do% {
apply(m[,WhichCells(ser.comb,ident=i)],1, function(x) length(which(x>1)))}
x<-foreach(i=1:length(rownames(m)),.combine='rbind') %do% { pdbm[which(pdbm$converted_alias==rownames(m)[i]),] }
y<-as.character(unique(x$cell.type))
###remove cell types tat have less than 5 markers remaining after intersecting the our data
yl<-foreach(i=1:length(y),.combine='c') %do% { length(which(x$cell.type==y[i]))}
il<-foreach(i=0:max(levels(ser.comb@ident)),.combine='c') %do% { length(which(ser.comb@ident==i))}
y<-y[which(yl>=5)]

####### Calculate a weighted average for each cell typt across all the markers for each type. 
####Use sensitivity value as basis for weight, then max-min scale across rows to identify likely cell type for each cluster

ym<-foreach(i=1:length(y),.combine='rbind') %do% {
	z<-x[x$cell.type==y[i],]
	wghts<-z$sensitivity_mouse
	ids<-intersect(rownames(m),z$converted_alias)
	z<-t(t(m[ids,])/il)
	z<-apply(z,2,function(x) sum(x*wghts))
	z<-z/sum(wghts)
}
rownames(ym)<-y
yn<-(apply(ym,1,function(x) (x-min(x))/(max(x)-min(x))))
write.csv(ym,"Cluster.ident.pdbm.csv")

########Identify markers for each cluster
comb.markers <- FindConservedMarkers(ser.comb , ident.1 = 0, grouping.var = "Age", 
    print.bar = FALSE)
ser.comb.markers<-FindAllMarkers(object = ser.comb,test.use="wilcox",min.pct=0.05)
ser.comb.markers$Gene_Symbol<-MGI[ser.comb.markers$gene]
write.csv(ser.comb.markers,"Markers.table.comb.csv")

#########make figure pdfs

pdf("Cluster.5.vlnplot.pdf", paper="USr",onefile=T)
VlnPlot(ser.comb,features.plot = MGI.rev["Itgal"])+ ggtitle("Itgal")
VlnPlot(ser.comb,features.plot = MGI.rev["Icam1"])+ ggtitle("Icam1")
VlnPlot(ser.comb,features.plot = MGI.rev["Gjb6"])+ ggtitle("Gjb6")
VlnPlot(ser.comb,features.plot = MGI.rev["Phactr1"])+ ggtitle("Phactr1")
dev.off()

pdf("Cluster.1.vnplots.pdf", paper="USr",onefile=T)
VlnPlot(ser.comb,features.plot = MGI.rev["Nexn"]) + ggtitle("Nexn")
VlnPlot(ser.comb,features.plot = MGI.rev["Mfge8"]) + ggtitle("Mfge8")
VlnPlot(ser.comb,features.plot = MGI.rev["Pln"]) + ggtitle("Pln")
VlnPlot(ser.comb,features.plot = MGI.rev["Cspg4"]) + ggtitle("Cspg4")
VlnPlot(ser.comb,features.plot = MGI.rev["Mcam"]) + ggtitle("Mcam")
VlnPlot(ser.comb,features.plot = MGI.rev["Des"]) + ggtitle("Des")
VlnPlot(ser.comb,features.plot = MGI.rev["Pdgfrb"]) + ggtitle("Pdgfrb")
VlnPlot(ser.comb,features.plot = MGI.rev["Mylk"]) + ggtitle("Mylk")
VlnPlot(ser.comb,features.plot = MGI.rev["Acta2"]) + ggtitle("Acta2")
VlnPlot(ser.comb,features.plot = MGI.rev["Mustn1"]) + ggtitle("Mustn1")
VlnPlot(ser.comb,features.plot = MGI.rev["Myh11"]) + ggtitle("Myh11")
VlnPlot(ser.comb,features.plot = MGI.rev["Tagln"]) + ggtitle("Tagln")
dev.off()


pdf("Cluster.4.vnplots.pdf", paper="USr",onefile=T)
VlnPlot(ser.comb,features.plot = MGI.rev["Fcer1g"])+ ggtitle("Fcer1g")
VlnPlot(ser.comb,features.plot = MGI.rev["Lyz2"])+ ggtitle("Lyz2")
VlnPlot(ser.comb,features.plot = MGI.rev["Ctss"])+ ggtitle("Ctss")
VlnPlot(ser.comb,features.plot = MGI.rev["Cd68"])+ ggtitle("Cd68")
VlnPlot(ser.comb,features.plot = MGI.rev["Ptprc"])+ ggtitle("Ptprc")
dev.off()

pdf("Fibroblasts.pdf", paper="USr",onefile=T)
VlnPlot(ser.comb,features.plot = MGI.rev["Col1a2"])+ ggtitle("Col1a2")
VlnPlot(ser.comb,features.plot = MGI.rev["Col1a1"])+ ggtitle("Col1a1")
VlnPlot(ser.comb,features.plot = MGI.rev["Col3a1"])+ ggtitle("Col3a1")
VlnPlot(ser.comb,features.plot = MGI.rev["Col5a1"])+ ggtitle("Col5a1")
VlnPlot(ser.comb,features.plot = MGI.rev["Col5a2"])+ ggtitle("Col5a2")
VlnPlot(ser.comb,features.plot = MGI.rev["Col6a3"])+ ggtitle("Col6a3")
VlnPlot(ser.comb,features.plot = MGI.rev["Col5a2"])+ ggtitle("Col5a2")
VlnPlot(ser.comb,features.plot = MGI.rev["Col5a2"])+ ggtitle("Fn1")

dev.off()


pdf("Cluster.3.vnplots.pdf", paper="USr",onefile=T)
VlnPlot(ser.comb,features.plot = MGI.rev["Pecam1"])+ ggtitle("Pecam1")
VlnPlot(ser.comb,features.plot = MGI.rev["Flt1"])+ ggtitle("Flt1")
VlnPlot(ser.comb,features.plot = MGI.rev["Ly6a"])+ ggtitle("Ly6a")
VlnPlot(ser.comb,features.plot = MGI.rev["Ly6c1"])+ ggtitle("Ly6c1")
VlnPlot(ser.comb,features.plot = MGI.rev["Egfl7"])+ ggtitle("Egfl7")
VlnPlot(ser.comb,features.plot = MGI.rev["Abcg2"])+ ggtitle("Abcg2")
dev.off()

#################get coculture cytokine markers
proarray<-read.csv("Differential.coculture.proteins.csv")
key<-read.csv("key_actual.csv")
x<-as.character(key[,3])
names(x)<-as.character(key[,1])
key<-x
proarray<-intersect(key[proarray[,1]],MGI[rownames(ser.comb@scale.data)])
proarray<-MGI.rev[proarray]

####make dot plots of protein array genes in scRNA data
x<-ser.comb.markers[ser.comb.markers$cluster==3,]
x<-x[which(x$p_val_adj<0.1),]
x<-x[order(x[,2],decreasing=T),]
x<-x[which(x$avg_logFC>0),]
x<-intersect(pdbm$name,x$Gene_Symbol)
DotPlot(ser.comb,genes.plot = MGI.rev[x],group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3))

p1<-DotPlot(ser.comb,genes.plot = proarray,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=MGI[proarray])

p2<-DotPlot(ser.comb,genes.plot = proarray,group.by = "Age",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-1,1)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=MGI[proarray])


p3<-DotPlot(ser.comb,genes.plot = proarray,group.by = "Region",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-1,1)) +
scale_radius(range = c(1, 12), limits = c(0, 100)) + scale_x_discrete(labels=MGI[proarray])


pdf("DP.cytokines.pdf", width=16,height=12,onefile=T)
p1
p2
p3
dev.off()

####make tsne graphs for the seurat objects
pdf("Perplexity.3month.pdf", paper="USr",onefile=T)

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:10,perplexity=5,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=5") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:10,perplexity=10,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=10") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:10,perplexity=15,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=15") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.3 <- RunTSNE(object = ser.sub.3,dims.use=1:10,perplexity=20,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.3,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=20") + theme(plot.title = element_text(hjust = 0.5))

dev.off()


pdf("Perplexity.18month.pdf", paper="USr",onefile=T)

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:10,perplexity=5,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=5") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:10,perplexity=10,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=10") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:10,perplexity=15,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=15") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:10,perplexity=20,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=3, do.return = TRUE)+ ggtitle("perplexity=20") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:10,perplexity=25,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=4, do.return = TRUE)+ ggtitle("perplexity=25") + theme(plot.title = element_text(hjust = 0.5))

ser.sub.18 <- RunTSNE(object = ser.sub.18,dims.use=1:10,perplexity=30,dim.embed=3,reduction.use="ica")
DimPlot(ser.sub.18,reduction.use="tsne",dim.1=1,dim.2=2,pt.size=4, do.return = TRUE)+ ggtitle("perplexity=30") + theme(plot.title = element_text(hjust = 0.5))

dev.off()

pdf("CCA_plot_men.pdf", paper="USr",onefile=T)
TSNEPlot(ser.comb, do.label = T, do.return = T, pt.size =3)
dev.off()


####make heatmaps and dotplots of cell identity markers from  Panglao database

x<-intersect(pdbm$converted_alias,rownames(ser.comb@raw.data))
x<-foreach(i=1:length(x),.combine='rbind') %do% { pdbm[which(pdbm$converted_alias==x[i]),]}
x<-x[order(x$cell.type),]

x<-foreach(i=1:dim(ym)[1],.combine='rbind') %do% { x[which(x$cell.type==rownames(ym)[i]),]}

pdf("Pdbm.cell.ident.hp.pdf", paper="USr",onefile=T)
##endo
DoHeatmap(ser.comb,genes.use=x[x$cell.type=="Endothelial cells",]$converted_alias,disp.min=(-5),disp.max=5,col.low="purple3",col.mid="black",col.high="red",use.scaled=T,cex.col=0,cex.row=5) + scale_y_discrete(labels=rev(x[x$cell.type=="Endothelial cells",]$name)) + ggtitle("Endothelial Markers")
##peri
DoHeatmap(ser.comb,genes.use=x[x$cell.type=="Pericytes",]$converted_alias,disp.min=(-5),disp.max=5,col.low="purple3",col.mid="black",col.high="red",use.scaled=T,cex.col=0,cex.row=5) + scale_y_discrete(labels=rev(x[x$cell.type=="Pericytes",]$name)) + ggtitle("Pericyte Markers")
##smc
DoHeatmap(ser.comb,genes.use=x[x$cell.type=="Smooth muscle cells",]$converted_alias,disp.min=(-5),disp.max=5,col.low="purple3",col.mid="black",col.high="red",use.scaled=T,cex.col=0,cex.row=5) + scale_y_discrete(labels=rev(x[x$cell.type=="Smooth muscle cells",]$name)) + ggtitle("Smooth Muscle Cell Markers")
##fibro
DoHeatmap(ser.comb,genes.use=x[x$cell.type=="Fibroblasts",]$converted_alias,disp.min=(-5),disp.max=5,col.low="purple3",col.mid="black",col.high="red",use.scaled=T,cex.col=0,cex.row=5) + scale_y_discrete(labels=rev(x[x$cell.type=="Fibroblasts",]$name)) + ggtitle("Fibroblast Markers")
##Macs
DoHeatmap(ser.comb,genes.use=x[x$cell.type=="Macrophages",]$converted_alias,disp.min=(-5),disp.max=5,col.low="purple3",col.mid="black",col.high="red",use.scaled=T,cex.col=0,cex.row=5) + scale_y_discrete(labels=rev(x[x$cell.type=="Macrophages",]$name)) + ggtitle("Macrophage Markers")
##dc
DoHeatmap(ser.comb,genes.use=x[x$cell.type=="Dendritic cells",]$converted_alias,disp.min=(-5),disp.max=5,col.low="purple3",col.mid="black",col.high="red",use.scaled=T,cex.col=0,cex.row=5) + scale_y_discrete(labels=rev(x[x$cell.type=="Dendritic cells",]$name)) + ggtitle("Dendritic Cell Markers")
##microglia
DoHeatmap(ser.comb,genes.use=x[x$cell.type=="Microglia",]$converted_alias,disp.min=(-5),disp.max=5,col.low="purple3",col.mid="black",col.high="red",use.scaled=T,cex.col=0,cex.row=5) + scale_y_discrete(labels=rev(x[x$cell.type=="Microglia",]$name)) + ggtitle("Microglia Markers")
dev.off()

pdf("Pdbm.cell.ident.DP.pdf", width=24, height=12,onefile=T)

DotPlot(ser.comb,genes.plot = x[x$cell.type=="Endothelial cells",]$converted_alias,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=rev(x[x$cell.type=="Endothelial cells",]$name))

DotPlot(ser.comb,genes.plot = x[x$cell.type=="Pericytes",]$converted_alias,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=rev(x[x$cell.type=="Pericytes",]$name))

DotPlot(ser.comb,genes.plot = x[x$cell.type=="Smooth muscle cells",]$converted_alias,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=rev(x[x$cell.type=="Smooth muscle cells",]$name))

DotPlot(ser.comb,genes.plot =x[x$cell.type=="Fibroblasts",]$converted_alias,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=rev(x[x$cell.type=="Fibroblasts",]$name))

DotPlot(ser.comb,genes.plot = x[x$cell.type=="Macrophages",]$converted_alias,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=rev(x[x$cell.type=="Macrophages",]$name))

DotPlot(ser.comb,genes.plot = x[x$cell.type=="Dendritic cells",]$converted_alias,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=rev(x[x$cell.type=="Dendritic cells",]$name))

DotPlot(ser.comb,genes.plot = x[x$cell.type=="Microglia",]$converted_alias,group.by = "ident",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-3,3)) +
scale_radius(range = c(1, 12), limits = c(0, 100))+ scale_x_discrete(labels=rev(x[x$cell.type=="Microglia",]$name))
dev.off()

#########look for astocyte endothelial interactions
####download cell cell interaction database from Bader lab
##### and rnaseq of brain cells from barres lab
barres<-data.frame(read.csv("barreslab_rnaseq.csv"))
rownames(barres)<-barres[,1]

reclig<-read.delim("receptor_ligand_interactions_4_2017.txt")
pro.types<-read.delim("protein_types.txt")
####translate human symbols to mouse
A1<-firstup(tolower(as.character(reclig[,1])))
B1<-firstup(tolower(as.character(reclig[,2])))


interactors<-data.frame(A1,B1)
rownames(interactors)<-rownames(reclig)


####get astrocyte expressed genes look for fpkm >5

z<-barres[which(barres$Astrocytes>5),]

m<-unique(as.character(interactors$A1))
y<-intersect(m,z[,1])
ya<-foreach(i=1:length(y),.combine='rbind') %do% {interactors[interactors$A1==y[i],] }


m<-unique(as.character(interactors$B1))
y<-intersect(m,z[,1])
yb<-foreach(i=1:length(y),.combine='rbind') %do% {interactors[interactors$B1==y[i],] }

ya<-rbind(ya,yb)
astro.inter<-distinct(ya)

y<-names(ser.comb@ident[which(ser.comb@ident==1)])
y<-ser.comb@raw.data[,y]
x<-apply(y,1,function(x) sum(ifelse(x>5,1,0)))

m<-MGI[names(x[which(x>6)])]



####peri to astro
x<-ser.comb.markers[ser.comb.markers$cluster==1,]
x<-x[x$p_val_adj<=0.1,]
x<-x[x$avg_logFC>0,]
y<-as.character(pro.types[grep("Ligand",pro.types[,2]),1])
x<-intersect(x$Gene_Symbol,firstup(tolower(y)))
y<-intersect(x,unique(astro.inter[,1]))
ya<-foreach(i=1:length(y),.combine='rbind') %do% {astro.inter[astro.inter$A1==y[i],] }


y<-intersect(x,unique(astro.inter[,2]))
yb<-foreach(i=1:length(y),.combine='rbind') %do% {astro.inter[astro.inter$B1==y[i],] }
ya<-rbind(ya,yb)
perismc.astro<-distinct(ya)



ya<-foreach(i=1:length(perismc.astro$A1),.combine='rbind') %dopar% {pro.types[perismc.astro$A1[i]==firstup(tolower(pro.types[,1])),] }
ya<-ya[-(which(is.na(ya[,1]))),]
A1_type<-ya[,2]

ya<-foreach(i=1:length(perismc.astro$B1),.combine='rbind') %dopar% {pro.types[perismc.astro$B1[i]==firstup(tolower(pro.types[,1])),] }
ya<-ya[-(which(is.na(ya[,1]))),]
B1_type<-ya[,2]
perismc.astro<-data.frame(perismc.astro,A1_type,B1_type)

A1_astro<-barres[as.character(perismc.astro$A1),]$Astrocytes
B1_astro<-barres[as.character(perismc.astro$B1),]$Astrocytes

m<-apply(all[,names(ser.comb@ident[which(ser.comb@ident==1)])],1,mean)
A1_peri<-m[MGI.rev[as.character(perismc.astro$A1)]]
B1_peri<-m[MGI.rev[as.character(perismc.astro$B1)]]
perismc.astro<-data.frame(perismc.astro,A1_astro,B1_astro,A1_peri,B1_peri)



#####astro to peri/smc
x<-ser.comb.markers[ser.comb.markers$cluster==1,]
x<-x[x$p_val_adj<=0.1,]
x<-x[x$avg_logFC>0,]


y<-as.character(pro.types[grep("Receptor",pro.types[,2]),1])
y<-intersect(firstup(tolower(y)),x$Gene_Symbol)
ya<-foreach(i=1:length(y),.combine='rbind') %do% {astro.inter[astro.inter$A1==y[i],] }
yb<-foreach(i=1:length(y),.combine='rbind') %do% {astro.inter[astro.inter$B1==y[i],] }
astro.perismc<-distinct(rbind(ya,yb))





ya<-foreach(i=1:length(astro.perismc$A1),.combine='rbind') %dopar% {pro.types[astro.perismc$A1[i]==firstup(tolower(pro.types[,1])),] }
ya<-ya[-(which(is.na(ya[,1]))),]
A1_type<-ya[,2]

ya<-foreach(i=1:length(astro.perismc$B1),.combine='rbind') %dopar% {pro.types[astro.perismc$B1[i]==firstup(tolower(pro.types[,1])),] }
ya<-ya[-(which(is.na(ya[,1]))),]
B1_type<-ya[,2]
astro.perismc<-data.frame(astro.perismc,A1_type,B1_type)

A1_astro<-barres[as.character(astro.perismc$A1),]$Astrocytes
B1_astro<-barres[as.character(astro.perismc$B1),]$Astrocytes

m<-apply(all[,names(ser.comb@ident[which(ser.comb@ident==1)])],1,mean)
A1_peri<-m[MGI.rev[as.character(astro.perismc$A1)]]
B1_peri<-m[MGI.rev[as.character(astro.perismc$B1)]]




astro.perismc<-data.frame(astro.perismc,A1_astro,B1_astro,A1_peri,B1_peri)


y<-astro.perismc[c(grep("Ligand",astro.perismc$A1_type),grep("Ligand",astro.perismc$B1_type)),]
y<-distinct(y)
grep("Ligand",y[,3])
####make directional from ligand (A) to receptor (B)
####141 is end so flip A1 and B1 for 142 on
m<-y[142:dim(y)[1],]
m<-data.frame(m$B1,m$A1,m$B1_type,m$A1_type,m$B1_astro,m$A1_astro,m$B1_peri,m$A1_peri)
colnames(m)<-colnames(y)
y<-rbind(y[1:141,],m)


x<-perismc.astro[c(grep("Receptor",perismc.astro$A1_type),grep("Receptor",perismc.astro$B1_type)),]
x<-distinct(x)
grep("Receptor",x[,3])
####165 is end so flip A1 and B1 up to 165
m<-x[1:165,]
m<-data.frame(m$B1,m$A1,m$B1_type,m$A1_type,m$B1_astro,m$A1_astro,m$B1_peri,m$A1_peri)
colnames(m)<-colnames(x)
x<-rbind(x[166:dim(x)[1],],m)




########create a edges list for cytoscape

m1<-semi_join(x,y)
m2<-semi_join(y,x)
m<-distinct(rbind(m1,m2))
m1<-distinct(anti_join(x,y))
m2<-distinct(anti_join(y,x))

Groups<-rep("Both",dim(m)[1])
m<-data.frame(m,Groups)
Groups<-rep("Peri_ligands",dim(m1)[1])
m1<-data.frame(m1,Groups)
m1<-m1[m1$B1_astro>5,]
m1<-m1[!(is.na(m1$A1_astro>5)),]
Groups<-rep("Astro_ligands",dim(m2)[1])
m2<-data.frame(m2,Groups)
m2<-m2[m2$A1_astro>5,]
m2<-m2[!(is.na(m2$A1_astro>5)),]
edges.interactions.cl1<-rbind(m,m1,m2)

write.csv(edges.interactions.cl1,"edges.interactions.cl1.csv")



##########make a graph of pericyte genes from edges.interaction.cl1

y<-SubsetData(ser.comb,ident.use=1)



x<-as.character(edges.interactions.cl1[edges.interactions.cl1$A1_peri>1,]$A1)
x<-unique(x)
x<-x[-(which(is.na(MGI.rev[x])))]
z<-intersect(rownames(y@scale.data),MGI.rev[x])

p1<-DotPlot(y,genes.plot = z,group.by = "Age",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-2,2)) +
scale_radius(range = c(0, 5), limits = c(0, 100))+ scale_x_discrete(labels=rev(MGI[z])) + ggtitle("Age Ligands")
p2<-DotPlot(y,genes.plot = z,group.by = "Region",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-2,2)) +
scale_radius(range = c(0, 5), limits = c(0, 100))+ scale_x_discrete(labels=rev(MGI[z])) + ggtitle("Region Ligands")


x<-as.character(edges.interactions.cl1[edges.interactions.cl1$B1_peri>1,]$B1)
x<-unique(x)
z<-intersect(rownames(y@scale.data),MGI.rev[x])

p3<-DotPlot(y,genes.plot = z,group.by = "Age",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-2,2)) +
scale_radius(range = c(0, 5), limits = c(0, 100))+ scale_x_discrete(labels=rev(MGI[z])) + ggtitle("Age Receptors")

p4<-DotPlot(y,genes.plot = z,group.by = "Region",dot.min=0.01,x.lab.rot=T,plot.legend=T,do.return=T) + scale_colour_gradient2(low="purple3",mid="slategray2",high="red",limits=c(-2,2)) +
scale_radius(range = c(0, 5), limits = c(0, 100))+ scale_x_discrete(labels=rev(MGI[z])) + ggtitle("Region Receptors")


pdf("Cluster1.dotplot.rec.ligands.pdf",width=20,height=15, onefile=T)
p1
p2
p3
p4
dev.off()
######make a node table for cytoscape
x<-edges.interactions.cl1

y<-edges.interactions.cl1[edges.interactions.cl1$Groups=="Peri_ligands",]
y<-y[which(y$A1_astro>5),]
z<-y[which(y$B1_peri>2),]
z<-data.frame(as.character(edges.interactions.cl1$A1),as.character(edges.interactions.cl1$A1_type),
	edges.interactions.cl1$A1_astro,edges.interactions.cl1$A1_peri)
y<-data.frame(as.character(edges.interactions.cl1$B1),as.character(edges.interactions.cl1$B1_type),
	edges.interactions.cl1$B1_astro,edges.interactions.cl1$B1_peri)
colnames(z)<-c("shared name","Type","Astro","Peri")
colnames(y)<-c("shared name","Type","Astro","Peri")
z<-rbind(z,y)
library(dplyr)
z<-distinct(z)
write.csv(z,"Node.table.cl1.csv")





